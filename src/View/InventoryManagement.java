/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Controller.InventoryController;
import Model.DB;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Dinith Maleesha
 */
public class InventoryManagement extends javax.swing.JFrame {

    /**
     * Creates new form InventoryDashboard
     */
    public InventoryManagement() {
        initComponents();
        lbl_errorMsg.setText("");
        tableContent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Bg = new javax.swing.JPanel();
        SidePanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btn_report = new javax.swing.JButton();
        btn_management = new javax.swing.JButton();
        btn_dashboard = new javax.swing.JButton();
        TopPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btn_addProduct = new javax.swing.JButton();
        txt_productId = new javax.swing.JTextField();
        btn_searchProduct = new javax.swing.JButton();
        btn_editProduct = new javax.swing.JButton();
        btn_deletProduct = new javax.swing.JButton();
        productScrollPane = new javax.swing.JScrollPane();
        tbl_product = new javax.swing.JTable();
        txt_productName = new javax.swing.JTextField();
        txt_productPrice = new javax.swing.JTextField();
        txt_productQt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btn_editOK = new javax.swing.JButton();
        btn_editCancel = new javax.swing.JButton();
        lbl_errorMsg = new javax.swing.JLabel();
        incomingScrollPane = new javax.swing.JScrollPane();
        tbl_incoming = new javax.swing.JTable();
        outgoingScrollPane = new javax.swing.JScrollPane();
        tbl_outgoing = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_incomingID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btn_receive = new javax.swing.JButton();
        btn_notReceive = new javax.swing.JButton();
        txt_outgoingID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btn_completed = new javax.swing.JButton();
        btn_notCompleted = new javax.swing.JButton();
        btn_addIncomingStock = new javax.swing.JButton();
        btn_addOutgoingStock = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Management");
        setLocation(new java.awt.Point(0, 0));
        setName("DashboardForm"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1280, 1000));
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 1000));

        Bg.setBackground(new java.awt.Color(255, 255, 255));

        SidePanel.setBackground(new java.awt.Color(0, 150, 255));

        jPanel2.setBackground(new java.awt.Color(0, 66, 209));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inventory\n");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
        );

        btn_report.setBackground(new java.awt.Color(0, 150, 255));
        btn_report.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_report.setForeground(new java.awt.Color(255, 255, 255));
        btn_report.setText("Report");
        btn_report.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reportActionPerformed(evt);
            }
        });

        btn_management.setBackground(new java.awt.Color(0, 150, 255));
        btn_management.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_management.setForeground(new java.awt.Color(255, 255, 255));
        btn_management.setText("Management");
        btn_management.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));

        btn_dashboard.setBackground(new java.awt.Color(0, 150, 255));
        btn_dashboard.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_dashboard.setForeground(new java.awt.Color(255, 255, 255));
        btn_dashboard.setText("Dashboard");
        btn_dashboard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_dashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dashboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SidePanelLayout = new javax.swing.GroupLayout(SidePanel);
        SidePanel.setLayout(SidePanelLayout);
        SidePanelLayout.setHorizontalGroup(
            SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(SidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_management, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(btn_report, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_dashboard, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        SidePanelLayout.setVerticalGroup(
            SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SidePanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_management, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_report, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 710, Short.MAX_VALUE))
        );

        TopPanel.setBackground(new java.awt.Color(0, 150, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Inventory Management");

        javax.swing.GroupLayout TopPanelLayout = new javax.swing.GroupLayout(TopPanel);
        TopPanel.setLayout(TopPanelLayout);
        TopPanelLayout.setHorizontalGroup(
            TopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(753, Short.MAX_VALUE))
        );
        TopPanelLayout.setVerticalGroup(
            TopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TopPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        btn_addProduct.setBackground(new java.awt.Color(0, 150, 255));
        btn_addProduct.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_addProduct.setForeground(new java.awt.Color(255, 255, 255));
        btn_addProduct.setText("Add Product");
        btn_addProduct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_addProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addProductActionPerformed(evt);
            }
        });

        txt_productId.setToolTipText("Enter Product ID");

        btn_searchProduct.setBackground(new java.awt.Color(0, 150, 255));
        btn_searchProduct.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_searchProduct.setForeground(new java.awt.Color(255, 255, 255));
        btn_searchProduct.setText("Search Product");
        btn_searchProduct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_searchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchProductActionPerformed(evt);
            }
        });

        btn_editProduct.setBackground(new java.awt.Color(0, 150, 255));
        btn_editProduct.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_editProduct.setForeground(new java.awt.Color(255, 255, 255));
        btn_editProduct.setText("Edit Product");
        btn_editProduct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_editProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editProductActionPerformed(evt);
            }
        });

        btn_deletProduct.setBackground(new java.awt.Color(0, 150, 255));
        btn_deletProduct.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_deletProduct.setForeground(new java.awt.Color(255, 255, 255));
        btn_deletProduct.setText("Delete Product");
        btn_deletProduct.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_deletProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deletProductActionPerformed(evt);
            }
        });

        tbl_product.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productScrollPane.setViewportView(tbl_product);
        if (tbl_product.getColumnModel().getColumnCount() > 0) {
            tbl_product.getColumnModel().getColumn(0).setResizable(false);
            tbl_product.getColumnModel().getColumn(1).setResizable(false);
            tbl_product.getColumnModel().getColumn(2).setResizable(false);
            tbl_product.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel2.setText("Product Name :");

        jLabel4.setText("Product Price :");

        jLabel5.setText("Quantity :");

        btn_editOK.setBackground(new java.awt.Color(0, 150, 255));
        btn_editOK.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_editOK.setForeground(new java.awt.Color(255, 255, 255));
        btn_editOK.setText("Ok");
        btn_editOK.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_editOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editOKActionPerformed(evt);
            }
        });

        btn_editCancel.setBackground(new java.awt.Color(0, 150, 255));
        btn_editCancel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_editCancel.setForeground(new java.awt.Color(255, 255, 255));
        btn_editCancel.setText("Cancel");
        btn_editCancel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_editCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editCancelActionPerformed(evt);
            }
        });

        lbl_errorMsg.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        lbl_errorMsg.setForeground(new java.awt.Color(255, 0, 51));
        lbl_errorMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_errorMsg.setText("Error");

        tbl_incoming.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Suplier", "Quantity", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        incomingScrollPane.setViewportView(tbl_incoming);
        if (tbl_incoming.getColumnModel().getColumnCount() > 0) {
            tbl_incoming.getColumnModel().getColumn(0).setResizable(false);
            tbl_incoming.getColumnModel().getColumn(1).setResizable(false);
            tbl_incoming.getColumnModel().getColumn(2).setResizable(false);
            tbl_incoming.getColumnModel().getColumn(3).setResizable(false);
        }

        tbl_outgoing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Customer", "Quantity", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        outgoingScrollPane.setViewportView(tbl_outgoing);
        if (tbl_outgoing.getColumnModel().getColumnCount() > 0) {
            tbl_outgoing.getColumnModel().getColumn(0).setResizable(false);
            tbl_outgoing.getColumnModel().getColumn(1).setResizable(false);
            tbl_outgoing.getColumnModel().getColumn(2).setResizable(false);
            tbl_outgoing.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Incoming Stock");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Outgoing Stock");

        jLabel8.setText("Incoming ID :");

        btn_receive.setBackground(new java.awt.Color(0, 150, 255));
        btn_receive.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_receive.setForeground(new java.awt.Color(255, 255, 255));
        btn_receive.setText("Received ");
        btn_receive.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_receive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_receiveActionPerformed(evt);
            }
        });

        btn_notReceive.setBackground(new java.awt.Color(0, 150, 255));
        btn_notReceive.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_notReceive.setForeground(new java.awt.Color(255, 255, 255));
        btn_notReceive.setText("Not Received ");
        btn_notReceive.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_notReceive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_notReceiveActionPerformed(evt);
            }
        });

        jLabel9.setText("Outgoing ID :");

        btn_completed.setBackground(new java.awt.Color(0, 150, 255));
        btn_completed.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_completed.setForeground(new java.awt.Color(255, 255, 255));
        btn_completed.setText("Completed");
        btn_completed.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_completed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_completedActionPerformed(evt);
            }
        });

        btn_notCompleted.setBackground(new java.awt.Color(0, 150, 255));
        btn_notCompleted.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_notCompleted.setForeground(new java.awt.Color(255, 255, 255));
        btn_notCompleted.setText("Not Completed");
        btn_notCompleted.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_notCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_notCompletedActionPerformed(evt);
            }
        });

        btn_addIncomingStock.setBackground(new java.awt.Color(0, 150, 255));
        btn_addIncomingStock.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_addIncomingStock.setForeground(new java.awt.Color(255, 255, 255));
        btn_addIncomingStock.setText("Add Incoming Stock");
        btn_addIncomingStock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_addIncomingStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addIncomingStockActionPerformed(evt);
            }
        });

        btn_addOutgoingStock.setBackground(new java.awt.Color(0, 150, 255));
        btn_addOutgoingStock.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_addOutgoingStock.setForeground(new java.awt.Color(255, 255, 255));
        btn_addOutgoingStock.setText("Add Outgoing Stock");
        btn_addOutgoingStock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_addOutgoingStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addOutgoingStockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BgLayout = new javax.swing.GroupLayout(Bg);
        Bg.setLayout(BgLayout);
        BgLayout.setHorizontalGroup(
            BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BgLayout.createSequentialGroup()
                .addComponent(SidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TopPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(BgLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BgLayout.createSequentialGroup()
                                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbl_errorMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(BgLayout.createSequentialGroup()
                                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(productScrollPane)
                                        .addGroup(BgLayout.createSequentialGroup()
                                            .addComponent(btn_addProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(26, 26, 26)
                                            .addComponent(txt_productId, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btn_searchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(incomingScrollPane)
                                        .addComponent(outgoingScrollPane))
                                    .addComponent(jLabel6))
                                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BgLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(BgLayout.createSequentialGroup()
                                                .addComponent(btn_editCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btn_editOK, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(BgLayout.createSequentialGroup()
                                                .addComponent(btn_notReceive, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btn_receive, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(BgLayout.createSequentialGroup()
                                                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel5)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel8))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BgLayout.createSequentialGroup()
                                                        .addGap(1, 1, 1)
                                                        .addComponent(jLabel9)))
                                                .addGap(18, 18, 18)
                                                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txt_outgoingID, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(txt_incomingID, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(txt_productPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(txt_productName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                                                    .addComponent(txt_productQt, javax.swing.GroupLayout.Alignment.TRAILING)))
                                            .addGroup(BgLayout.createSequentialGroup()
                                                .addComponent(btn_notCompleted, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btn_completed, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(btn_addIncomingStock, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btn_addOutgoingStock, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(28, 28, 28))
                                    .addGroup(BgLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_editProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_deletProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(45, Short.MAX_VALUE))))))))
        );
        BgLayout.setVerticalGroup(
            BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(BgLayout.createSequentialGroup()
                .addComponent(TopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_errorMsg)
                .addGap(38, 38, 38)
                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_addProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(txt_productId)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_searchProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                        .addComponent(btn_editProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                        .addComponent(btn_deletProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(productScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BgLayout.createSequentialGroup()
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_productName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(34, 34, 34)
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_productQt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_editOK, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_editCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(5, 5, 5)
                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(incomingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BgLayout.createSequentialGroup()
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_incomingID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_receive, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_notReceive, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(76, 76, 76)
                        .addComponent(btn_addIncomingStock, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outgoingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BgLayout.createSequentialGroup()
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_outgoingID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_completed, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_notCompleted, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_addOutgoingStock, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void tableContent(){
        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String currentDateString = currentDate.format(formatter);

        String a = "SELECT `id`, `supplier`, `quantity`, `date` FROM `incoming_products` WHERE `date` = '" + currentDateString + "'";
        showTable(a, tbl_incoming, incomingScrollPane);
        
        String b = "SELECT `id`, `customer`, `quantity`, `date` FROM `outgoing_products` WHERE `date` = '" + currentDateString + "'";
        showTable(b, tbl_outgoing, outgoingScrollPane);
    }
    private void btn_addProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addProductActionPerformed
        // TODO add your handling code here:
        AddProduct addProduct = new AddProduct(this,true);
        addProduct.setVisible(true);
    }//GEN-LAST:event_btn_addProductActionPerformed

    private void btn_dashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dashboardActionPerformed
        // TODO add your handling code here:
        InventoryDashboard d1 = new InventoryDashboard();
        d1.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_dashboardActionPerformed

    private void btn_reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reportActionPerformed
        // TODO add your handling code here:
        InventoryReport report = new InventoryReport();
        report.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_reportActionPerformed

    private void btn_searchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchProductActionPerformed
        // TODO add your handling code here:
        txt_productName.setText("");
        txt_productPrice.setText("");
        txt_productQt.setText("");
        DefaultTableModel model = (DefaultTableModel) tbl_product.getModel();
        model.setRowCount(0);
        String productIdtext = txt_productId.getText();
        if(!productIdtext.isEmpty()) {
            try{
                lbl_errorMsg.setText("");
                int productId = Integer.parseInt(productIdtext);
                if(productId != 0 && productId != -1){
                    Connection conn = DB.createConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT `product_id`, `Product_name`, `Product_price`, `Product_qt` FROM `products` WHERE product_id = '"+productId+"'");

                    while (rs.next()) {
                        Object[] row = new Object[4];
                        row[0] = rs.getInt("product_id");
                        row[1] = rs.getString("Product_name");
                        row[2] = rs.getInt("Product_price");
                        row[3] = rs.getInt("Product_qt");
                        model.addRow(row);
                    }
                    tbl_product.setEnabled(false);
                    JScrollPane scrollPane = new JScrollPane(tbl_product);
                    productScrollPane.setViewportView(scrollPane);
                    conn.close();
                }
                else{
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Invalid Product ID.");
                }
            }
            catch (NumberFormatException e) {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Invalid Product ID. Please enter a valid integer value.");
                lbl_errorMsg.setForeground(Color.RED);
                e.printStackTrace();
            } catch (NullPointerException e) {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Please contact the programmer.");
                lbl_errorMsg.setForeground(Color.RED);
                e.printStackTrace();
            } catch (SQLException e) {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Please check your database connection.");
                lbl_errorMsg.setForeground(Color.RED);
                e.printStackTrace();
            } catch (Exception e) {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("An error occurred. Please try again later.");
                lbl_errorMsg.setForeground(Color.RED);
                e.printStackTrace();
            }
        }
        else{
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Product ID cannot be empty.");
        }
    }//GEN-LAST:event_btn_searchProductActionPerformed

    private void btn_editProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editProductActionPerformed
        // TODO add your handling code here:
        txt_productName.setText("");
        txt_productPrice.setText("");
        txt_productQt.setText("");
        String productIdtext = txt_productId.getText();
        if(!productIdtext.isEmpty()){
            try{
                lbl_errorMsg.setText("");
                int productId = Integer.parseInt(productIdtext);
                if(productId != 0 && productId != -1){
                    Connection conn = DB.createConnection();
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT `Product_name`, `Product_price`, `Product_qt` FROM `products` WHERE product_id = '"+productId+"'");

                    while (rs.next()) {
                        txt_productName.setText(rs.getString("Product_name"));
                        txt_productPrice.setText(Integer.toString(rs.getInt("Product_price")));
                        txt_productQt.setText(Integer.toString(rs.getInt("Product_qt")));
                    }
                    conn.close();
                }
                else{
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Invalid Product ID.");
                }
            
            }catch (SQLException e) {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Please check your database connection.");
                lbl_errorMsg.setForeground(Color.RED);
                e.printStackTrace();
            } catch (Exception e) {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("An error occurred. Please try again later.");
                lbl_errorMsg.setForeground(Color.RED);
                e.printStackTrace();
            }
        }
        else{
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Please search product first.");
        }
    }//GEN-LAST:event_btn_editProductActionPerformed

    private void btn_deletProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deletProductActionPerformed
        // TODO add your handling code here:
        String productIdtext = txt_productId.getText();
        
        if (!productIdtext.isEmpty()) {
            int productId = Integer.parseInt(txt_productId.getText());
            if (productId >= 0) {
                try {
                    Connection conn = DB.createConnection();
                    String sql = "SELECT * FROM products WHERE product_id = ?";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setInt(1, productId);
                    ResultSet rs = stmt.executeQuery();
                    if (rs.next()) {
                        String deleteQuery = "DELETE FROM products WHERE product_id = ?";
                        PreparedStatement deleteStmt = conn.prepareStatement(deleteQuery);
                        deleteStmt.setInt(1, productId);
                        int rowsAffected = deleteStmt.executeUpdate();
                        if (rowsAffected > 0) {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Product Deleted");
                        } else {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Please try again.");
                        }
                    } else {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Cannot Find Product");
                    }
                    conn.close();
                } catch (SQLException e) {
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Please check your database connection.");
                    lbl_errorMsg.setForeground(Color.RED);
                    e.printStackTrace();
                } catch (Exception e) {
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("An error occurred. Please try again later.");
                    lbl_errorMsg.setForeground(Color.RED);
                    e.printStackTrace();
                }
            } else {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Product ID should be a positive number");
            }
        } else {
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Please search for a product first.");
        }

    }//GEN-LAST:event_btn_deletProductActionPerformed

    private void btn_editOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editOKActionPerformed
        // TODO add your handling code here:
        int productId = Integer.parseInt(txt_productId.getText());
        String productName = txt_productName.getText();
        int productPrice = Integer.parseInt(txt_productPrice.getText());
        int qt = Integer.parseInt(txt_productQt.getText());
        
        String productPriceText = Integer.toString(productPrice);
        String qtText = Integer.toString(qt);

        if (!productName.isEmpty() && !productPriceText.isEmpty() && !qtText.isEmpty()) {
            if (!productName.matches(".*\\d+.*")) {
                if (productPriceText.matches("\\d+")) {
                    if (productPrice > 0){
                        if(qtText.matches("\\d+")){
                            if(qt >= 0){
                                try{
                                    Connection conn = DB.createConnection();
                                    String sql = "UPDATE `products` SET `Product_name`='"+productName+"',`Product_price`='"+productPrice+"',`Product_qt`='"+qt+"' WHERE product_id = '"+productId+"'";
                                    PreparedStatement stmt = conn.prepareStatement(sql);
                                    int rowsAffected = stmt.executeUpdate();
                                    if (rowsAffected > 0) {
                                        lbl_errorMsg.setText("");
                                        lbl_errorMsg.setText("Prodcut Updated.");
                                        txt_productName.setText("");
                                        txt_productPrice.setText("");
                                        txt_productQt.setText("");
                                    } else {
                                        lbl_errorMsg.setText("");
                                        lbl_errorMsg.setText("Please try Again.");
                                    }   
                                    conn.close();   
                                } catch (SQLException e) {
                                    lbl_errorMsg.setText("");
                                    lbl_errorMsg.setText("Please check your database connection.");
                                    lbl_errorMsg.setForeground(Color.RED);
                                    e.printStackTrace();
                                } catch (Exception e) {
                                    lbl_errorMsg.setText("");
                                    lbl_errorMsg.setText("An error occurred. Please try again later.");
                                    lbl_errorMsg.setForeground(Color.RED);
                                    e.printStackTrace();
                                }
                            } else {
                                lbl_errorMsg.setText("");
                                lbl_errorMsg.setText("Quantity must be a non-negative value");
                            }
                        }else {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Quantity must be a valid integer");
                        }
                    } else {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Product price must be greater than zero");
                    }
                } else {
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Product Price must be a numeric value.");
                    lbl_errorMsg.setForeground(Color.RED);
                }
            } else {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Product Name cannot contain numeric values.");
                lbl_errorMsg.setForeground(Color.RED);
            }
        } else {
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Please enter values for all fields.");
            lbl_errorMsg.setForeground(Color.RED);
        }
    }//GEN-LAST:event_btn_editOKActionPerformed

    private void btn_editCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editCancelActionPerformed
        // TODO add your handling code here:
        txt_productName.setText("");
        txt_productPrice.setText("");
        txt_productQt.setText("");
    }//GEN-LAST:event_btn_editCancelActionPerformed

    private void showTable(String sql, JTable table, JScrollPane scroll){
        String querry = sql;
        try {
            Connection conn = DB.createConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(querry);
            
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            
            while (rs.next()) {
                Object[] row = new Object[4];
                row[0] = rs.getInt(1);
                row[1] = rs.getString(2);
                row[2] = rs.getInt(3);
                row[3] = rs.getString(4);
                model.addRow(row);
            }
            table.setEnabled(false);
            JScrollPane scrollPane = new JScrollPane(table);
            scroll.setViewportView(scrollPane);
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
    }
    private void btn_receiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_receiveActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(txt_incomingID.getText());
        String idText = txt_incomingID.getText();
        int product_id = 0, quantity = 0;
        String supplier = null;
        Date date = null;
        String movement_type, source_location;
        LocalDate currentDate = LocalDate.now();
        
        if(!idText.isEmpty()){
            if(!idText.matches(".*[a-zA-Z].*")){
                if(id > 0){
                    try{
                        String selectSql = "SELECT ip.product_id, ip.quantity, ip.supplier, ip.date FROM incoming_products AS ip JOIN products AS p ON ip.product_id = p.product_id WHERE ip.id = '"+id+"'";
                        Connection conn = DB.createConnection();
                        PreparedStatement stmt = conn.prepareStatement(selectSql);
                        ResultSet rs = stmt.executeQuery();
                        while (rs.next()) {
                            product_id = rs.getInt("product_id");
                            quantity = rs.getInt("quantity");
                            supplier = rs.getString("supplier");
                            date = rs.getDate("date");
                        } 
                        String deleteSql = "DELETE FROM `incoming_products` WHERE id = '"+id+"'";
                        PreparedStatement st = conn.prepareStatement(deleteSql);
                        int rowsAffected = st.executeUpdate();
                        if (rowsAffected > 0) {
                            movement_type = "in";
                            source_location = "Colombo";
                            String insertSQL = "INSERT INTO `stock_movement_history`(`product_id`, `movement_date`, `movement_type`, `quantity`, `source_location`, `destination_location`,`created_at`) VALUES (?, ?, ?, ?, ?, ?, ?)";
                            PreparedStatement stm = conn.prepareStatement(insertSQL);
                            stm.setInt(1, product_id);
                            stm.setDate(2, date);
                            stm.setString(3, movement_type);
                            stm.setInt(4, quantity);
                            stm.setString(5, supplier);
                            stm.setString(6, source_location);
                            stm.setDate(7, java.sql.Date.valueOf(currentDate));
                            int row = stm.executeUpdate();
                            if(row > 0){
                                String updateProduct = "UPDATE `products` SET `Product_qt` = `Product_qt` + '"+quantity+"' WHERE product_id = '"+product_id+"'";
                                PreparedStatement stat = conn.prepareStatement(updateProduct);
                                int rows = stat.executeUpdate();
                                if(rows > 0){
                                    lbl_errorMsg.setText("");
                                    lbl_errorMsg.setText("Operation Completed");
                                } else {
                                    lbl_errorMsg.setText("");
                                    lbl_errorMsg.setText("Please try Again.");
                                }
                            } else {
                                lbl_errorMsg.setText("");
                                lbl_errorMsg.setText("Please try Again.");
                            }
                        } else {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Please try Again.");
                        }
                        
                        conn.close();
                    } catch (SQLException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please check your database connection.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (NumberFormatException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please contact the programmer.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (Exception e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("An error occurred. Please try again later.");
                        lbl_errorMsg.setForeground(Color.RED);
                         e.printStackTrace();
                    }
                
                } else {
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Incoming ID Should be positive Integer");
                }
            }else {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Incoming ID Should be Integer");
            }
        } else {
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Please enter Incoming ID");
        }
    }//GEN-LAST:event_btn_receiveActionPerformed

    private void btn_notReceiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_notReceiveActionPerformed
        // TODO add your handling code here:
        LocalDate currentDate = LocalDate.now();
        int id = Integer.parseInt(txt_incomingID.getText());
        String idText = txt_incomingID.getText();
        
        if(!idText.isEmpty()){
            if(!idText.matches(".*[a-zA-Z].*")){
                if(id > 0){
                    try{
                        Connection conn = DB.createConnection();
                        String deleteSql = "UPDATE `incoming_products` SET `date` = DATE_ADD(`date`, INTERVAL 1 DAY) WHERE `id` = '"+id+"'";
                        PreparedStatement st = conn.prepareStatement(deleteSql);
                        int rowsAffected = st.executeUpdate();
                        if (rowsAffected > 0) {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Date Updated");
                            txt_incomingID.setText("");
                        } else {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Please try Again.");
                        }
                        conn.close();
                    } catch (SQLException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please check your database connection.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (NumberFormatException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please contact the programmer.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (Exception e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("An error occurred. Please try again later.");
                        lbl_errorMsg.setForeground(Color.RED);
                         e.printStackTrace();
                    }
                
                } else {
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Incoming ID Should be positive Integer");
                }
            }else {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Incoming ID Should be Integer");
            }
        } else {
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Please enter Incoming ID");
        }
    }//GEN-LAST:event_btn_notReceiveActionPerformed

    private void btn_completedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_completedActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(txt_outgoingID.getText());
        String idText = txt_outgoingID.getText();
        int product_id = 0, quantity = 0;
        String customer = null;
        Date date = null;
        String movement_type, source_location;
        LocalDate currentDate = LocalDate.now();
        
        if(!idText.isEmpty()){
            if(!idText.matches(".*[a-zA-Z].*")){
                if(id > 0){
                    try{
                        String selectSql = "SELECT ip.product_id, ip.quantity, ip.customer, ip.date FROM `outgoing_products` AS ip JOIN products AS p ON ip.product_id = p.product_id WHERE ip.id = '"+id+"'";
                        Connection conn = DB.createConnection();
                        PreparedStatement stmt = conn.prepareStatement(selectSql);
                        ResultSet rs = stmt.executeQuery();
                        while (rs.next()) {
                            product_id = rs.getInt("product_id");
                            quantity = rs.getInt("quantity");
                            customer = rs.getString("customer");
                            date = rs.getDate("date");
                        } 
                        String deleteSql = "DELETE FROM `outgoing_products` WHERE id = '"+id+"'";
                        PreparedStatement st = conn.prepareStatement(deleteSql);
                        int rowsAffected = st.executeUpdate();
                        if (rowsAffected > 0) {
                            movement_type = "out";
                            source_location = "Colombo";
                            String insertSQL = "INSERT INTO `stock_movement_history`(`product_id`, `movement_date`, `movement_type`, `quantity`, `source_location`, `destination_location`,`created_at`) VALUES (?, ?, ?, ?, ?, ?, ?)";
                            PreparedStatement stm = conn.prepareStatement(insertSQL);
                            stm.setInt(1, product_id);
                            stm.setDate(2, date);
                            stm.setString(3, movement_type);
                            stm.setInt(4, quantity);
                            stm.setString(5, source_location);
                            stm.setString(6, customer);
                            stm.setDate(7, java.sql.Date.valueOf(currentDate));
                            int row = stm.executeUpdate();
                            if(row > 0){
                                String updateProduct = "UPDATE `products` SET `Product_qt` = `Product_qt` - '"+quantity+"' WHERE product_id = '"+product_id+"'";
                                PreparedStatement stat = conn.prepareStatement(updateProduct);
                                int rows = stat.executeUpdate();
                                if(rows > 0){
                                    lbl_errorMsg.setText("");
                                    lbl_errorMsg.setText("Operation Completed");
                                } else {
                                    lbl_errorMsg.setText("");
                                    lbl_errorMsg.setText("Please try Again.");
                                }
                            } else {
                                lbl_errorMsg.setText("");
                                lbl_errorMsg.setText("Please try Again.");
                            }
                        } else {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Please try Again.");
                        }
                        
                        conn.close();
                    } catch (SQLException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please check your database connection.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (NumberFormatException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please contact the programmer.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (Exception e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("An error occurred. Please try again later.");
                        lbl_errorMsg.setForeground(Color.RED);
                         e.printStackTrace();
                    }
                
                } else {
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Incoming ID Should be positive Integer");
                }
            }else {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Incoming ID Should be Integer");
            }
        } else {
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Please enter Incoming ID");
        }
    }//GEN-LAST:event_btn_completedActionPerformed

    private void btn_notCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_notCompletedActionPerformed
        // TODO add your handling code here:
        LocalDate currentDate = LocalDate.now();
        int id = Integer.parseInt(txt_outgoingID.getText());
        String idText = txt_outgoingID.getText();
        
        if(!idText.isEmpty()){
            if(!idText.matches(".*[a-zA-Z].*")){
                if(id > 0){
                    try{
                        Connection conn = DB.createConnection();
                        String deleteSql = "UPDATE `outgoing_products` SET `date` = DATE_ADD(`date`, INTERVAL 1 DAY) WHERE `id` = '"+id+"'";
                        PreparedStatement st = conn.prepareStatement(deleteSql);
                        int rowsAffected = st.executeUpdate();
                        if (rowsAffected > 0) {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Date Updated");
                            txt_incomingID.setText("");
                        } else {
                            lbl_errorMsg.setText("");
                            lbl_errorMsg.setText("Please try Again.");
                        }
                        conn.close();
                    } catch (SQLException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please check your database connection.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (NumberFormatException e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("Please contact the programmer.");
                        lbl_errorMsg.setForeground(Color.RED);
                        e.printStackTrace();
                    }catch (Exception e) {
                        lbl_errorMsg.setText("");
                        lbl_errorMsg.setText("An error occurred. Please try again later.");
                        lbl_errorMsg.setForeground(Color.RED);
                         e.printStackTrace();
                    }
                
                } else {
                    lbl_errorMsg.setText("");
                    lbl_errorMsg.setText("Incoming ID Should be positive Integer");
                }
            }else {
                lbl_errorMsg.setText("");
                lbl_errorMsg.setText("Incoming ID Should be Integer");
            }
        } else {
            lbl_errorMsg.setText("");
            lbl_errorMsg.setText("Please enter Incoming ID");
        }
    }//GEN-LAST:event_btn_notCompletedActionPerformed

    private void btn_addIncomingStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addIncomingStockActionPerformed
        // TODO add your handling code here:
        AddIncomingStock obj = new AddIncomingStock(this, true);
        obj.setVisible(true);
    }//GEN-LAST:event_btn_addIncomingStockActionPerformed

    private void btn_addOutgoingStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addOutgoingStockActionPerformed
        // TODO add your handling code here:
        AddOutgoingStock obj = new AddOutgoingStock(this, true);
        obj.setVisible(true);
    }//GEN-LAST:event_btn_addOutgoingStockActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Bg;
    private javax.swing.JPanel SidePanel;
    private javax.swing.JPanel TopPanel;
    private javax.swing.JButton btn_addIncomingStock;
    private javax.swing.JButton btn_addOutgoingStock;
    private javax.swing.JButton btn_addProduct;
    private javax.swing.JButton btn_completed;
    private javax.swing.JButton btn_dashboard;
    private javax.swing.JButton btn_deletProduct;
    private javax.swing.JButton btn_editCancel;
    private javax.swing.JButton btn_editOK;
    private javax.swing.JButton btn_editProduct;
    private javax.swing.JButton btn_management;
    private javax.swing.JButton btn_notCompleted;
    private javax.swing.JButton btn_notReceive;
    private javax.swing.JButton btn_receive;
    private javax.swing.JButton btn_report;
    private javax.swing.JButton btn_searchProduct;
    private javax.swing.JScrollPane incomingScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbl_errorMsg;
    private javax.swing.JScrollPane outgoingScrollPane;
    private javax.swing.JScrollPane productScrollPane;
    private javax.swing.JTable tbl_incoming;
    private javax.swing.JTable tbl_outgoing;
    private javax.swing.JTable tbl_product;
    private javax.swing.JTextField txt_incomingID;
    private javax.swing.JTextField txt_outgoingID;
    private javax.swing.JTextField txt_productId;
    private javax.swing.JTextField txt_productName;
    private javax.swing.JTextField txt_productPrice;
    private javax.swing.JTextField txt_productQt;
    // End of variables declaration//GEN-END:variables
}
